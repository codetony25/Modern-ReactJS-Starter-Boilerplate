'use strict';

var _react = require('react');

function ensureArray(maybeArray) {
  if (!maybeArray) {
    return [];
  } else {
    if (Array.isArray(maybeArray)) {
      return maybeArray;
    } else {
      return [maybeArray];
    }
  }
}

function isReactRouterish(type) {
  return type && (type.displayName === 'Router' || type.name === 'Router' // In case Ryan and Michael embrace ES6 classes
  );
}

function extractComponents(routes) {
  return ensureArray(routes).filter(Boolean).map(function (route) {
    var isElement = (0, _react.isValidElement)(route);
    var component = isElement ? route.props.component : route.component;
    var namedComponentsByKey = isElement ? route.props.components : route.components;

    var indexRoute = route.indexRoute;
    var childRoutes = isElement ? _react.Children.toArray(route.props.children) : ensureArray(route.childRoutes);
    var namedComponents = Object.keys(namedComponentsByKey || {}).map(function (key) {
      return namedComponentsByKey[key];
    });

    var indexRouteComponents = indexRoute && extractComponents(indexRoute);
    var childRouteComponents = childRoutes && extractComponents(childRoutes);
    return [].concat(component, namedComponents, indexRouteComponents, childRouteComponents);
  }).reduce(function (flattened, candidates) {
    return flattened.concat(candidates);
  }, []).filter(function (c) {
    return typeof c === 'function';
  });
}

function extractRouteHandlerComponents(props) {
  var routes = props.routes || _react.Children.toArray(props.children);
  return extractComponents(routes);
}

module.exports = {
  isReactRouterish: isReactRouterish,
  extractRouteHandlerComponents: extractRouteHandlerComponents
};